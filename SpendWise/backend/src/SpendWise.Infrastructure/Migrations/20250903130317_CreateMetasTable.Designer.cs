// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SpendWise.Infrastructure.Data;

#nullable disable

namespace SpendWise.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250903130317_CreateMetasTable")]
    partial class CreateMetasTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SpendWise.Domain.Entities.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsAtiva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Prioridade")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId", "Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_Categorias_Usuario_Nome");

                    b.ToTable("Categorias", (string)null);
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.FechamentoMensal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AnoMes")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasComment("Formato YYYY-MM");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataFechamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("SaldoFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalDespesas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalReceitas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnoMes")
                        .HasDatabaseName("IX_FechamentosMensais_AnoMes");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_FechamentosMensais_Status");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_FechamentosMensais_UsuarioId");

                    b.HasIndex("UsuarioId", "AnoMes")
                        .IsUnique()
                        .HasDatabaseName("IX_FechamentosMensais_Usuario_AnoMes");

                    b.ToTable("FechamentosMensais", (string)null);
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.Meta", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataAlcancada")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsAtiva")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Prazo")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DataAlcancada")
                        .HasDatabaseName("IX_Metas_DataAlcancada");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_Metas_UsuarioId");

                    b.HasIndex("UsuarioId", "IsAtiva")
                        .HasDatabaseName("IX_Metas_UsuarioId_IsAtiva");

                    b.HasIndex("UsuarioId", "Prazo")
                        .HasDatabaseName("IX_Metas_UsuarioId_Prazo");

                    b.ToTable("Metas", (string)null);
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.OrcamentoMensal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AnoMes")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("ano_mes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("criado_em");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("atualizado_em");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("AnoMes")
                        .HasDatabaseName("ix_orcamento_anomes");

                    b.HasIndex("UsuarioId", "AnoMes")
                        .IsUnique()
                        .HasDatabaseName("IX_OrcamentosMensais_Usuario_Periodo");

                    b.ToTable("orcamentos_mensais", null, t =>
                        {
                            t.HasCheckConstraint("ck_orcamento_anomes_formato", "ano_mes ~ '^[0-9]{4}-(0[1-9]|1[0-2])$'");

                            t.HasCheckConstraint("ck_orcamento_valor_positivo", "valor >= 0");
                        });
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.Transacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataTransacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("IX_Transacoes_CategoriaId");

                    b.HasIndex("DataTransacao")
                        .HasDatabaseName("IX_Transacoes_DataTransacao");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_Transacoes_UsuarioId");

                    b.ToTable("Transacoes", (string)null);
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAtivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RendaMensal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Usuarios_Email");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.Categoria", b =>
                {
                    b.HasOne("SpendWise.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Categorias")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SpendWise.Domain.ValueObjects.Money", "Limite", b1 =>
                        {
                            b1.Property<Guid>("CategoriaId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Moeda")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("BRL")
                                .HasColumnName("LimiteMoeda");

                            b1.Property<decimal>("Valor")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("LimiteValor");

                            b1.HasKey("CategoriaId");

                            b1.ToTable("Categorias");

                            b1.WithOwner()
                                .HasForeignKey("CategoriaId");
                        });

                    b.Navigation("Limite");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.FechamentoMensal", b =>
                {
                    b.HasOne("SpendWise.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.Meta", b =>
                {
                    b.HasOne("SpendWise.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Metas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SpendWise.Domain.ValueObjects.Money", "ValorAtual", b1 =>
                        {
                            b1.Property<Guid>("MetaId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Moeda")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ValorAtual");

                            b1.HasKey("MetaId");

                            b1.ToTable("Metas");

                            b1.WithOwner()
                                .HasForeignKey("MetaId");
                        });

                    b.OwnsOne("SpendWise.Domain.ValueObjects.Money", "ValorObjetivo", b1 =>
                        {
                            b1.Property<Guid>("MetaId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Moeda")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("Valor")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ValorObjetivo");

                            b1.HasKey("MetaId");

                            b1.ToTable("Metas");

                            b1.WithOwner()
                                .HasForeignKey("MetaId");
                        });

                    b.Navigation("Usuario");

                    b.Navigation("ValorAtual")
                        .IsRequired();

                    b.Navigation("ValorObjetivo")
                        .IsRequired();
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.OrcamentoMensal", b =>
                {
                    b.HasOne("SpendWise.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SpendWise.Domain.ValueObjects.Money", "Valor", b1 =>
                        {
                            b1.Property<Guid>("OrcamentoMensalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Moeda")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("BRL")
                                .HasColumnName("Moeda");

                            b1.Property<decimal>("Valor")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(14,2)")
                                .HasColumnName("Valor");

                            b1.HasKey("OrcamentoMensalId");

                            b1.ToTable("orcamentos_mensais");

                            b1.WithOwner()
                                .HasForeignKey("OrcamentoMensalId");
                        });

                    b.Navigation("Usuario");

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.Transacao", b =>
                {
                    b.HasOne("SpendWise.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Transacoes")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SpendWise.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Transacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SpendWise.Domain.ValueObjects.Money", "Valor", b1 =>
                        {
                            b1.Property<Guid>("TransacaoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Moeda")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasDefaultValue("BRL")
                                .HasColumnName("Moeda");

                            b1.Property<decimal>("Valor")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("Valor");

                            b1.HasKey("TransacaoId");

                            b1.ToTable("Transacoes");

                            b1.WithOwner()
                                .HasForeignKey("TransacaoId");
                        });

                    b.Navigation("Categoria");

                    b.Navigation("Usuario");

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Transacoes");
                });

            modelBuilder.Entity("SpendWise.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("Metas");

                    b.Navigation("Transacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
